<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.kimwonjoon.infrastructure.dao.IAiAgentDao">

    <resultMap id="dataMap" type="top.kimwonjoon.infrastructure.dao.po.AiAgent">
        <id column="id" property="id"/>
        <result column="agent_name" property="agentName"/>
        <result column="description" property="description"/>
        <result column="channel" property="channel"/>
        <result column="status" property="status"/>
        <result column="head_client_id" property="headClientId"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>

    </resultMap>

    <!-- 插入智能体配置 -->
    <insert id="insert" parameterType="top.kimwonjoon.infrastructure.dao.po.AiAgent">
        INSERT INTO ai_agent (
            agent_name, channel, description, status, create_time, update_time,head_client_id
        ) VALUES (
                     #{agentName}, #{description}, #{status}, #{createTime}, #{updateTime},#{headClientId}
                 )
    </insert>

    <!-- 更新智能体配置 -->
    <update id="update" parameterType="top.kimwonjoon.infrastructure.dao.po.AiAgent">
        UPDATE ai_agent
        SET agent_name = #{agentName},
            channel = #{channel},
            description = #{description},
            status = #{status},
            update_time = #{updateTime}
        WHERE id = #{id}
    </update>
    <!-- 根据ID删除智能体配置 -->
    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM ai_agent
        WHERE id = #{id}
    </delete>

    <!-- 根据智能体ID查询关联的客户端ID列表 -->
    <select id="queryClientIdsByAgentId" resultType="java.lang.Long">
    select distinct a.client_id
    from
        (SELECT
             client_id_to AS client_id
         FROM
             ai_agent_client_line
         WHERE
             agent_id = #{agentId}

         UNION ALL

         SELECT
             head_client_id AS client_id
         FROM
             ai_agent
         WHERE
             id = #{agentId}
           AND head_client_id IS NOT NULL

         ORDER BY
             client_id)  a where client_id is not null
    </select>

    <!-- 查询所有有效的智能体关联的客户端ID -->
    <select id="queryValidClientIds" resultType="java.lang.Long">
        SELECT DISTINCT
            ac.client_id_from
        FROM
            ai_agent a
                JOIN
            ai_agent_client_line ac ON a.id = ac.agent_id
        WHERE
            a.status = 1
    </select>

    <!-- 根据条件查询智能体列表 -->
    <select id="queryAiAgentList" parameterType="top.kimwonjoon.infrastructure.dao.po.AiAgent" resultMap="dataMap">
        SELECT
        id, agent_name, channel, description, status, create_time, update_time
        FROM
        ai_agent
        <where>
            <if test="id != null">
                AND id = #{id}
            </if>
            <if test="agentName != null and agentName != ''">
                AND agent_name LIKE CONCAT('%', #{agentName}, '%')
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
        </where>
        ORDER BY create_time DESC
        <if test="pageSize != null and pageSize > 0">
            LIMIT #{offset}, #{limit}
        </if>
    </select>
    <select id="queryAllAgentConfigByChannel" resultType="java.lang.String" resultMap="dataMap">
        SELECT id, agent_name, channel, description, status, create_time, update_time
        FROM ai_agent
        WHERE channel = #{channel}
    </select>

    <!-- 根据ID查询智能体配置 -->
    <select id="queryAgentConfigById" parameterType="java.lang.Long" resultMap="dataMap">
        SELECT id, agent_name, channel, description, status, create_time, update_time
        FROM ai_agent
        WHERE id = #{id}
    </select>

    <select id="queryHeadClientByAgentId" parameterType="java.lang.Long" resultType="java.lang.Long" >
        SELECT head_client_id
        FROM ai_agent
        WHERE id = #{id} and status = 1
    </select>

</mapper>